//**** 1. Pagination - not used because it reloads brpwser, clearing worksheet ****//
views/dataviewer/index.ejs
<!-- 
// Pagination is not done because going to the next page will remove entries from the worksheet; load times are not slow enough to warrant another method
    <div class="pagination">
    <% if (currentPage > 1) { %>
        <a href="/dataviewer?page=1&searchBar=<%= searchQuery %>">&lt;&lt;</a>
        <a href="/dataviewer?page=<%= Math.max(currentPage - 10, 1) %>&searchBar=<%= searchQuery %>">&lt;</a>
    <% } %>

    <% const maxPagesToShow = 10; %>
    <% const startPage = Math.max(currentPage - Math.floor(maxPagesToShow / 2), 1); %>
    <% const endPage = Math.min(startPage + maxPagesToShow - 1, totalPages); %>

    <% for (let i = startPage; i <= endPage; i++) { %>
        <a href="/dataviewer?page=<%= i %>&searchBar=<%= searchQuery %>" class="<%= currentPage === i ? 'activePagination' : '' %>">
        <%= i %>
        </a>
    <% } %>

    <% if (currentPage < totalPages) { %>
        <a href="/dataviewer?page=<%= Math.min(currentPage + 10, totalPages) %>&searchBar=<%= searchQuery %>">&gt;</a>
        <a href="/dataviewer?page=<%= totalPages %>&searchBar=<%= searchQuery %>">&gt;&gt;</a>
    <% } %>
    </div>
-->


//**** 2. Single image upload to classify ****//
app.js
/*
//Single image upload (plant)
app.post('/identifyP', async (req, res) => {
  const project = 'all?include-related-images=false&no-reject=false&lang=en&type=kt';
  const apiKey = config.plantNetAPI;
  const apiUrl = `https://my-api.plantnet.org/v2/identify/${project}&api-key=${apiKey}`;
  const formData = new FormData();

  // Check if req.files.image exists and is not null
  if (!req.files || !req.files.image) {
      return res.status(400).json({ message: 'No file uploaded.' });
  }

  // Access the uploaded file  
  const file = req.files.image;
  const fileStream = fs.createReadStream(file.tempFilePath);
  formData.append('images', fileStream, { filename: file.name });

  try {
      const response = await axios.post(apiUrl, formData, {
          headers: {
              ...formData.getHeaders(),
          },
      });

      // Extract information about the top 3 matches
      const top4Matches = response.data.results.slice(0, 4);

      // Function to remove parentheses, backslashes, and question marks
      const removeParentheses = (str) => (str || '').replace(/[()\\?]/g, '').trim();

      // Send back detailed information to the client
      res.status(response.status).json({
          status: response.status,
          top4Matches: top4Matches.map(match => ({
              name: removeParentheses(match.species.commonNames[0]), // Ensure this exists
              scientificName: removeParentheses(match.species.scientificName), // Ensure this exists
              score: match.score
          }))
      });
  } catch (error) {
      console.error('Error:', error);
      res.status(error.response?.status || 500).json({ message: error.message });
  }
});
 */


routes/plants.js 
/*
//Single image upload code
// Import express and create a router object
const express = require("express");
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const router = express.Router();
var logMiddleware = require('../logMiddleware'); //route logging middleware
const IsLoggedIn = require("../extensions/authentication");

//Mongoose models
const Plant = require("../models/plant"); // Import mongoose model to be used

//FILE STORAGE (multer)
// Update the storage configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const userId = req.user._id; // Assuming user object is available after authentication
    const userImagesPath = `public/images/plantae_images`;
    fs.mkdirSync(path.join(__dirname, '..', userImagesPath), { recursive: true });
    cb(null, userImagesPath);
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});
const upload = multer({ storage: storage });

// Use the middleware to check if the user is logged in
router.use(IsLoggedIn);

// Function to sanitize the search query
const sanitizeQuery = (query) => {
  return query.replace(/[()\\?]/g, ''); // Remove parentheses, backslashes, and question marks
};

// GET handler for index /plants/ <<landing/root page of my sections
const pageSize = 4;
router.get('/', IsLoggedIn, logMiddleware, async (req, res, next) => {
  try {
    // SearchBar query parameter
    let searchQuery = sanitizeQuery(req.query.searchBar || '');
    const userId = req.user._id;
    // Use a case-insensitive regular expression to match part of the name
    let query = {
      $or: [
        { name: { $regex: new RegExp(searchQuery, 'i') } },
        { binomialNomenclature: { $regex: new RegExp(searchQuery, 'i') } }
      ],
      user: userId // Include user ID in the search criteria
    };
    let page = parseInt(req.query.page) || 1;
    let skipSize = pageSize * (page - 1);
    const plants = await Plant.find(query)
      .sort({ binomialNomenclature: 1, updateDate: 1 })
      .limit(pageSize)
      .skip(skipSize);
    const totalRecords = await Plant.countDocuments(query);
    const totalPages = Math.ceil(totalRecords / pageSize);
    res.render("plants", {
      title: "Plant Dataset",
      user: req.user,
      dataset: plants,
      searchQuery: searchQuery,
      totalPages: totalPages,
      currentPage: page,
    });
  } catch (err) {
    console.log(err);
    res.status(500).send("Internal Server Error");
  }
});
//ADD name field = name_timestamp.jpg
const userImagesPath = 'public/images/plantae_images';
// Ensure the directory exists
fs.mkdirSync(path.join(__dirname, '..', userImagesPath), { recursive: true });
const createUniqueImageName = (name, originalName) => {
  // Replace spaces with underscores in the name
  const formattedName = name.replace(/\s+/g, '_');
  const extension = path.extname(originalName);
  const timestamp = new Date().getTime();
  const uniqueName = `${formattedName}_${timestamp}${extension}`;
  return uniqueName;
};

// ADD view POST
const Exifr = require('exifr'); //FOR DATA INTEGRITY VARIABLES
function convertToDecimal(latitude, longitude, latRef, lonRef) { // Function to convert GPS coordinates to decimal form
  const lat = convertCoordinate(latitude);
  const lon = convertCoordinate(longitude);
  const latWithSign = latRef === 'S' ? -lat : lat;
  const lonWithSign = lonRef === 'W' ? -lon : lon;
  return latWithSign.toFixed(6).toString() + ', ' + lonWithSign.toFixed(6).toString();
}
function convertCoordinate(coordinate) { // Function to convert coordinate to decimal form
  const [degrees, minutes, seconds] = coordinate;
  const decimal = degrees + minutes / 60 + seconds / 3600;
  return decimal;
}
function convertToDate(dateTimeOriginal) { // Function to convert date to the specified format
  const date = new Date(dateTimeOriginal);
  date.setMinutes(date.getMinutes() - date.getTimezoneOffset()); // Correct for local time zone offset (**this may need to be changed)
  return `${date.getUTCFullYear()}:${String(date.getUTCMonth() + 1).padStart(2, '0')}:${String(date.getUTCDate()).padStart(2, '0')} ${String(date.getUTCHours()).padStart(2, '0')}:${String(date.getUTCMinutes()).padStart(2, '0')}:${String(date.getUTCSeconds()).padStart(2, '0')}`;
}

//GET handler for /plants/add (loads page)
router.get("/add", IsLoggedIn, logMiddleware, (req, res, next) => {
  res.render("plants/add", { user: req.user, title: "Add a new Plant" });
});

//POST handler for /plants/add (saves new entry to database)
router.post("/add", IsLoggedIn, upload.single('image'), async (req, res, next) => {
  try {
    const uniqueImageName = createUniqueImageName(req.body.name, req.file.originalname);
    // Move the uploaded image to the new destination path
    const newDestinationPath = path.join(__dirname, '..', userImagesPath, uniqueImageName);
    await fs.promises.rename(req.file.path, newDestinationPath);
    //image data integrity code
    // Extract metadata from the image
    const metadata = await Exifr.parse(newDestinationPath);
    // Convert GPS coordinates to decimal form
    const imageGPS = metadata?.GPSLatitude && metadata?.GPSLongitude ? convertToDecimal(metadata.GPSLatitude, metadata.GPSLongitude, metadata.GPSLatitudeRef, metadata.GPSLongitudeRef) : null;
    // Convert date to the specified format
    const imageDate = metadata?.DateTimeOriginal ? convertToDate(metadata.DateTimeOriginal) : null;
    //console.log(req.body.location);
    //console.log(req.body.updateDate);
    var locationDataIntegrityValue;
    var dateDataIntegrityValue;
    if(imageDate === req.body.updateDate){
      dateDataIntegrityValue = 0;
    }else{
      dateDataIntegrityValue = 1;
    }
    if (imageGPS === req.body.location) {
      locationDataIntegrityValue = 0;
    }else{
      locationDataIntegrityValue = 1;
    }
    // Create a new plant entry for the updated image
    const createdModel = await Plant.create({
      name: req.body.name,
      binomialNomenclature: req.body.binomialNomenclature,
      updateDate: req.body.updateDate,
      location: req.body.location,
      image: uniqueImageName,
      user: req.user._id,
      dateChanged: dateDataIntegrityValue,
      locationChanged: locationDataIntegrityValue,
    });
    //console.log("Model created successfully:", createdModel);
    //console.log(imageGPS);
    //console.log(imageDate);
    res.redirect("/plants");
  } catch (error) {
    console.error("An error occurred:", error);
    res.redirect("/error");
  }
});
*/


views/plants/add.ejs
<%- include('../partials/header') %>
<h1><%= title %></h1>
<!-- available to req.body object -->
<form id="addPlantForm" method="POST" enctype="multipart/form-data">
  <!-- Input names have to match the name of the fields in the mongo schema object -->
  <div id="dataVisual">
    <div id="imageAndName">
        <fieldset class="form-group">
            <label for="image" class="col-2">Image:</label>
            <input type="file" name="image" id="image" class="form-control" accept=".jpg, .jpeg, .png" required onchange="identifyPlant()">
        </fieldset>
        <div id="nameRow">
        <fieldset class="form-group">
            <label for="name" class="col-2">Name:</label>
            <input name="name" id="name" class="form-control" required readonly/>
        </fieldset>
        <fieldset class="form-group">
            <label for="binomialNomenclature" class="col-2">Scientific Name:</label>
            <input name="binomialNomenclature" id="binomialNomenclature" class="form-control" required readonly/>
        </fieldset>
      </div>
        <div id="top4"></div> <!-- list top 3 names, scientific name and percentages -->
    </div>
    <div id="imageVisual">
        <img src="/site_images/noimage.png" alt="No image" id="preview">
    </div>
  </div>
  <fieldset class="form-group">
    <label for="updateDate" class="col-2">Date Identified:</label>
    <input
      name="updateDate"
      id="updateDate"
      required
      class="form-control"
      placeholder="YYYY:MM:DD HH:mm:ss"
    />
  </fieldset>
  <fieldset class="form-group">
    <label for="location" class="col-2">Location:</label>
    <input name="location" id="location" class="form-control" placeholder="Latitude, Longitude (e.g., 45.0000, -45.0000)" required/>
  </fieldset>
  <!-- Display the selected location's coordinates -->
  <div id="coordinates"><span id="help">If unsure of coordinates - enter name of location, then copy map coordinates</span></div>
  <!-- Display the selected location's coordinates using Leaflet -->
  <div id="map" style="height: 300px;"></div>

  <!-- Button needs to be inside <form> element to trigger POST -->
  <button class="offset-3 btn btn-primary">Save</button>
</form>

<script defer>
  async function identifyPlant() {
    // Changes preview image
    const images = image.files;
    const formData = new FormData();
    formData.append('image', images[0]);
    
    try {
      const apiUrl = 'http://localhost:3000/identifyP'; // Your server URL
      const response = await fetch(apiUrl, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        console.error('Error response status:', response.status);
        console.log('Error response text:', await response.text());
        return;
      }

      const data = await response.json();
      console.log('status', response.status);
      console.log('data', data);
      
      // Display top 4 matches
      const top4Div = document.getElementById('top4');
      top4Div.innerHTML = ''; // Clear previous content

      data.top4Matches.forEach((match, index) => {
        const matchDiv = document.createElement('div');
        matchDiv.innerHTML = `
          <strong>${index + 1}. Name:</strong> ${match.name}; 
          <strong>Scientific Name:</strong> ${match.scientificName}; 
          <strong>Score:</strong> ${match.score}
        `;
        
        // Create button for each match
        const button = document.createElement('button');
        button.textContent = 'Select';
        button.type = 'button'; // Prevent form submission
        button.onclick = () => {
          document.getElementById('name').value = match.name;
          document.getElementById('binomialNomenclature').value = match.scientificName;
        };

        matchDiv.appendChild(button);
        top4Div.appendChild(matchDiv);  
      });
      
      // Optionally set initial values for fields
      document.getElementById('binomialNomenclature').value = data.top4Matches[0].scientificName;
      document.getElementById('name').value = data.top4Matches[0].name;

      //Sanitize data - NOTE: keep this, in-case of user DOM manipulation in browser console-->
      document.getElementById('addPlantForm').addEventListener('submit', function(event) {
        // Remove parentheses from name and scientific name
        const commonNameInput = document.getElementById('name');
        const scientificInput = document.getElementById('binomialNomenclature');

        commonNameInput.value = commonNameInput.value.replace(/[()]/g, '').trim();
        scientificInput.value = scientificInput.value.replace(/[()]/g, '').trim();
      });

    } catch (error) {
      console.error('error', error);
    }
  }
</script>
<%- include('../partials/footer') %>